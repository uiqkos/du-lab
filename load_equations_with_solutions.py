import base64
import lzma
import json
import re

import sympy


def phapl_populate_cache(b64):
    decoded_data = base64.b64decode(b64)

    try:
        decompressed_data = lzma.decompress(decoded_data)
    except lzma.LZMAError as error:
        print(f'Error decompressing lzma phapl\'s prepopulated cache: {error}')
        return

    try:
        json_data = json.loads(decompressed_data.decode('utf-8'))
    except json.JSONDecodeError as error:
        print(f'Error parsing JSON data: {error}')
        return

    return json_data


point_type_regexp = r'Тип особой точки: (.*?)\.'
stability_regexp = r'Устойчивость: (.*?)\.'
point_regexp = r'Точка (.*?)\.'


def parse(json_data):
    res = []
    for equation in json_data:
        eq = equation[0]
        text = equation[1]

        json_eq = {
            'equation': eq,
            # 'text': text,
            'points': []
        }

        if len(re.findall(point_type_regexp, text)) < 1 or len(re.findall(stability_regexp, text)) < 1 \
            or len(re.findall(point_regexp, text)) < 1:
            print(re.findall(point_type_regexp, text))
            print(re.findall(stability_regexp, text))
            print(re.findall(point_regexp, text))
            print(text)
            exit(9)

        for point, point_type, stability in zip(
            re.findall(point_regexp, text),
            re.findall(point_type_regexp, text),
            re.findall(stability_regexp, text)
        ):
            json_eq['points'].append({
                'point': point,
                'point_type': point_type,
                'stability': stability
            })

        res.append(json_eq)

    return res


def get_eqs():
    a = ('XQAAAAT//////////wAt4IS4IU6v6RdFNX1PDlnGCCvB5zY7LS7Q/0e++TbAead5oEbApFYi0Pd4LVPDVZCaU6NR1H44BdGgc1jXZ+YlcDLu8'
         '+jFZ6/08BSVUt+hn1FLLN1xOhTXnGrr/NZZX8sLF03daWQjMiTzQXSOXV98pzyVxsLmrr2MlwwijWII6Q6egdzUKtsbgOkGDIrJoyi/sq'
         '+Rc39qEGNMKa9DPhyB1bYTB7iKcOjnqeJnb62Hm6G3sDl74stvwO3L0Ikf5YE4ByDhSU+SX+RApeZM4gz1zYdNGWlSDsxw'
         '/zU2L6YIEvD0fkp15CrMXrGQeA8mrANOvxgkSEBJLleqsuO181p1OoS3fTZoXKBjEpebd9etEFdsGSFt/a3/dk47KWe'
         '/g9O1LJQfmsvEznLdTCiPfdE5p61EJfLQTBs4YcIbUoID6e1dT6vRI8LBP9Vpdjm9P+dh8x8X+Tz3rALePUNzDGEgnbEAUmkVk/DoFRmIe5'
         '/ngENhOXC6TLFSR+XUYs/2jBChj+fJ4LC+SRuK2kAAF+TiuHl1byUycQR/bvLg/pbVKBEXp0RJ67GayEAXCAR1ggvbF4oHsu1LfJR1Z97qB/q'
         '/xwzadGUklgFWrUsYXXv7qAQNFUurmhTs9dXDWMI7EmYBuWU23+xaOvn5H6ARQlX44WbJxjCHmZ4qzyIbz4JaQ6QAamgGKYceLEcTZyfaKkn9mo'
         '+7BoKQjhn6ndZg0AaOzEMu3jHkyXPEUCG+ODilW9f2x+ztpUzf3mMJhvPRxb98UkGPz0wdQBIO7vsTtRfL4ogYwtsLF+3HyzK9fCAVNWwDs0b'
         '/wk2L2kmGZNVi9fMeg+ZFScTe6UjZJ8fI9cUeeVDI/RKIX9pIzmNyVBOkFgwtgSF'
         '')

    result = parse(phapl_populate_cache(a))

    clean = re.compile('<.*?>')

    for i, eq in enumerate(result):
        for j, point in enumerate(eq['points']):
            point['stability'] = re.sub(clean, '', point['stability'])
            point['point_type'] = re.sub(clean, '', point['point_type'])
            result[i]['points'][j]['stability'] = ''.join(
                filter(lambda x: x.isalnum() or x == ' ', point['stability'])).strip()
            result[i]['points'][j]['point_type'] = ''.join(
                filter(lambda x: x.isalnum() or x == ' ', point['point_type'])).strip()

    return result


def get_coefficient_of_var(polynomial_str, var_str):
    polynomial_expr = sympy.sympify(polynomial_str)
    var = sympy.symbols(var_str)
    poly_obj = sympy.Poly(polynomial_expr, var)
    coefficient = poly_obj.coeff_monomial(var)

    return coefficient


def parse_equation(eqs: str) -> list[list[float]]:
    eqs.replace('"', '')
    eqs = eqs.split(',')
    eqs = [eq.strip() for eq in eqs]

    return [[
        get_coefficient_of_var(eq, 'x'), get_coefficient_of_var(eq, 'y')
    ] for eq in eqs]
